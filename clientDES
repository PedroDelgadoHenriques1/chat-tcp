import net from 'net';
import readline from 'readline';
import chalk from 'chalk';


function stringToHex(str) {
    let hex = '';
    for (let i = 0; i < str.length; i++) {
        const charCode = str.charCodeAt(i);
        const hexValue = charCode.toString(16).padStart(2, '0');
        hex += hexValue;
    }
    return hex;
}

function splitIntoBlocks(hexStr, blockSize = 56) {
    let blocks = [];
    for (let i = 0; i < hexStr.length; i += blockSize * 2) {
        blocks.push(hexStr.substring(i, i + blockSize * 2));
    }
    return blocks;
}


String.prototype.hexEncode = function(){
    var hex, i;

    var result = "";
    for (i=0; i<this.length; i++) {
        hex = this.charCodeAt(i).toString(16);
        result += ("000"+hex).slice(-4);
    }

    return result
}

console.log(chalk.green('Iniciando o cliente...'));

const client = net.createConnection({ port: 3000 }, () => {
    console.log(chalk.green('Conectado ao servidor.'));
});

client.on('data', (data) => {
    console.log(data)
    const chave = '0123456789ABCDEF';
//     let plaintext = String(data)
//     plaintext = desEncrypt(plaintext, chave);
//     console.log("Encrypted:", plaintext);
//     if (plaintext) {
//       console.log(chalk.blue(`Mensagem descriptografada: ${plaintext}`));
//   } else {
//       console.error(chalk.red("Erro ao descriptografar a mensagem."));
//   };
});

client.on('end', () => {
    console.log(chalk.red('Desconectado do servidor.'));
});

client.on('error', (err) => {
    console.error(chalk.red(`Erro: ${err.message}`));
});

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.on('line', (input) => {
    // let msg = hexEncode(input)
    const chave = '0123456789ABCDEF';
    // let stringHex = stringToHex(String(input));
    let blocks = splitIntoBlocks(input, 56);
    const listCrypto = blocks.map((item) => des(item, chave));
    console.log(listCrypto);
    if (listCrypto !== undefined) {
        let list = []
        listCrypto.forEach((item) => {
           client.write(item);
        });
        
    } else {
        console.error('listCrypto não está definido ou não é uma string');
    }
});

function des(input, chave) {


console.log('input', String(input), typeof input)
    //                                                          -----> Passo 0: Criando chaves <----- ! //
console.log('Passo 0: Inicialização');
const mensagem = '0123456723423423';
// const chave = '0123456789ABCDEF';


//                                                          -----> Passo 1: conversão para binário <----- ! //
// console.log('\n\nPasso 1: Convert to binary');
// function hexParaBin(hex) {
//     return hex.split('').map(char => {
//         return parseInt(char, 16).toString(2).padStart(4, '0');
//     }).join('');
// }

// const mensagembinaria = hexParaBin(input);
// const chavebinaria = hexParaBin(chave);
// console.log("Mensagem em binário:", mensagembinaria);
// console.log("Chave em binário:", chavebinaria);

console.log('\n\nPasso 1: Convert to binary');

function stringParaBinario(str) {
    return str.split('').map(char => {
        return char.charCodeAt(0).toString(2).padStart(8, '0'); // Converte cada caractere para binário
    }).join(' '); // Junta os resultados com espaço
}

const mensagembinaria = stringParaBinario(input);
const chavebinaria = stringParaBinario(chave);

console.log("Mensagem em binário:", mensagembinaria);
console.log("Chave em binário:", chavebinaria);


//                                                          -----> Passo 2: Permutando para 56 bits para Paridade/segurança
console.log('\n\nPermutando para 56 bits para Paridade/segurança');
const PC1 = [
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4
];

function permuteKey(chavebinaria, table) {
    return table.map(position => chavebinaria[position - 1]).join('');
}

const permutadaChave = permuteKey(chavebinaria, PC1);
console.log("Chave após permutação PC-1:", permutadaChave);


//                                                          -----> Passo 3: Rotacionando cada metade
console.log('\n\nPasso 3: Rotating each half');
const rotations = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

function leftRotate(bits, numrotacoes) {
    return bits.slice(numrotacoes) + bits.slice(0, numrotacoes);
}

function splitKey(permutadaChave) {
    const C0 = permutadaChave.slice(0, 28);
    const D0 = permutadaChave.slice(28);
    return { C0, D0 };
}

function rotateHalves(C0, D0, rotations) {
    let C = C0;
    let D = D0;

    const roundKeys = [];

    rotations.forEach(rotation => {
        C = leftRotate(C, rotation);
        D = leftRotate(D, rotation);

        roundKeys.push({ C, D });
    });

    return roundKeys;
}

const { C0, D0 } = splitKey(permutadaChave);
const rotatedKeys = rotateHalves(C0, D0, rotations);

rotatedKeys.forEach((chave, index) => {
    console.log(`Rodada ${index + 1} - C: ${chave.C}, D: ${chave.D}`);
});


// Passo 4: Concatenação
console.log('\n\nPasso 4: Concatenação');
function concatenateHalves(C, D) {
    return C + D;
}

const concatenatedKeys = rotatedKeys.map((chave, index) => {
    const concatenatedKey = concatenateHalves(chave.C, chave.D);
    console.log(`Rodada ${index + 1} - Chave concatenada: ${concatenatedKey}`);
    return concatenatedKey;
});


// Passo 5: Permutando a chave através da tabela PC-2
console.log('\n\nPasso 5:  Permutando a chave através da tabela PC-2');
const PC2 = [
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
];

function permutePC2(concatenatedKey) {
    return PC2.map(position => concatenatedKey[position - 1]).join('');
}

const subKeys = concatenatedKeys.map((chave, index) => {
    const subKey = permutePC2(chave);
    console.log(`Rodada ${index + 1} - Subchave de 48 bits: ${subKey}`);
    return subKey;
});


// Passo 6: Permute the mensagem through IP
console.log('\n\nPasso 6: Permute the mensagem through IP');
const IP = [
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
];

function permuteMessage(mensagembinaria) {
    return IP.map(position => mensagembinaria[position - 1]).join('');
}

const permutedMessage = permuteMessage(mensagembinaria);
console.log("Mensagem após permutação IP:", permutedMessage);


// Passo 7: envolve a codificação de dados
console.log('\n\nPasso 7: envolve a codificação de dados ');
const E = [
    32, 1, 2, 3, 4, 5,
    4, 5, 6, 7, 8, 9,
    8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25, 24, 25,
    26, 27, 28, 29, 28, 29, 30, 31, 32, 1
];

const SBoxes = [
    [
        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
        [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
    ],
    [
        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
        [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
    ],
    [
        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
        [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
    ],
    [
        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
        [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
    ],
    [
        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
        [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
        [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
    ],
    [
        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
        [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
        [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
    ],
    [
        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
        [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
        [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
    ],
    [
        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
        [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
    ]
];

const P = [
    16, 7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25
];

function xorBinary(bin1, bin2) {
    let result = '';
    for (let i = 0; i < bin1.length; i++) {
        result += bin1[i] === bin2[i] ? '0' : '1';
    }
    return result;
}

let L = permutedMessage.slice(0, 32);
let R = permutedMessage.slice(32);

function f(RnMinus1, Kn) {
    const expandedRnMinus1 = E.map(position => RnMinus1[position - 1]).join('');
    const xorResult = xorBinary(expandedRnMinus1, Kn);
    const groups = [];

    for (let i = 0; i < 8; i++) {
        groups.push(xorResult.slice(i * 6, (i + 1) * 6));
    }

    let sBoxResult = '';
    groups.forEach((group, index) => {
        const row = parseInt(group[0] + group[5], 2);
        const col = parseInt(group.slice(1, 5), 2);
        const sBoxValue = SBoxes[index][row][col];
        sBoxResult += sBoxValue.toString(2).padStart(4, '0');
    });

    return P.map(position => sBoxResult[position - 1]).join('');
}



//                                                          -----> Passo 8 até passo 23: Computando a rodada 1 até 16 <-----
console.log('\n\nPasso 8 até passo 23: Computando a rodada 1 até 16');
for (let round = 0; round < 16; round++) {
    const Kn = subKeys[round];
    const newR = xorBinary(L, f(R, Kn));

    L = R;
    R = newR;

    console.log(`Rodada ${round + 1} - L: ${L}, R: ${R}`);
}


//                                                          -----> Passo 24: Permute the encoded data through the IP-1 table <-----
console.log('\n\nPasso 24: Permute the encoded data through the IP-1 table');
const IP_1 = [
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
];

function applyFinalPermutation(concatenatedLR) {
    let permutedData = '';
    IP_1.forEach(position => {
        permutedData += concatenatedLR[position - 1];
    });
    return permutedData;
}

const L16 = `${L}`
const R16 = `${R}`;
const R16L16 = R16 + L16;
const finalPermutation = applyFinalPermutation(R16L16);

console.log("Mensagem criptografada final:", finalPermutation);


//                                                          -----> Passo 25: Converter novamente para hexadecimal <----- 
console.log('\n\nPasso 25: Converter novamente para hexadecimal');
function binaryToHex(binary) {
    let hex = '';
    for (let i = 0; i < binary.length; i += 4) {
        let nibble = binary.substr(i, 4);
        hex += parseInt(nibble, 2).toString(16).toUpperCase();
    }
    return hex;
}

const finalHex = binaryToHex(finalPermutation);

console.log("Mensagem criptografada final (hexadecimal):", finalHex);
  return finalHex;
}



function hexToBin(hex) {
    return hex.split('').map(char => {
        return parseInt(char, 16).toString(2).padStart(4, '0');
    }).join('');
}

function binToHex(bin) {
    let hex = '';
    for (let i = 0; i < bin.length; i += 4) {
        let nibble = bin.substr(i, 4);
        hex += parseInt(nibble, 2).toString(16).toUpperCase();
    }
    return hex;
}

function permute(message, table) {
    return table.map(position => message[position - 1]).join('');
}

const PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
             10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
             63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
             14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];

const PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10,
             23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2,
             41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
             44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];

const IP = [58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7];

const IP_1 = [40, 8, 48, 16, 56, 24, 64, 32,
              39, 7, 47, 15, 55, 23, 63, 31,
              38, 6, 46, 14, 54, 22, 62, 30,
              37, 5, 45, 13, 53, 21, 61, 29,
              36, 4, 44, 12, 52, 20, 60, 28,
              35, 3, 43, 11, 51, 19, 59, 27,
              34, 2, 42, 10, 50, 18, 58, 26,
              33, 1, 41, 9, 49, 17, 57, 25];

const E = [32, 1, 2, 3, 4, 5,
           4, 5, 6, 7, 8, 9,
           8, 9, 10, 11, 12, 13,
           12, 13, 14, 15, 16, 17,
           16, 17, 18, 19, 20, 21,
           20, 21, 22, 23, 24, 25,
           24, 25, 26, 27, 28, 29,
           28, 29, 30, 31, 32, 1];

const SBoxes = [
    // S1
    [
        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
        [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
    ],
    // S2
    [
        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
        [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
    ],
    // S3
    [
        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
        [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
    ],
    // S4
    [
        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
        [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
    ],
    // S5
    [
        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
        [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
        [4, 2, 1, 11, 10, 13, 7, 6, 8, 5, 0, 15, 9, 14, 3, 12],
        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
    ],
    // S6
    [
        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
        [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
        [4, 3, 2, 12, 9, 5, 15, 10, 14, 1, 7, 6, 11, 0, 8, 13]
    ],
    // S7
    [
        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
        [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
        [6, 1, 3, 10, 13, 8, 4, 11, 7, 9, 5, 0, 15, 14, 2, 12]
    ],
    // S8
    [
        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
        [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
    ]
];

const P = [16, 7, 20, 21, 29, 12, 28, 17,
           1, 15, 23, 26, 5, 18, 31, 10,
           3, 24, 14, 27, 11, 6, 4, 25,
           2, 8, 12, 22, 30, 9, 18, 15];

function leftShift(key, shifts) {
    return key.slice(shifts).concat(key.slice(0, shifts));
}

function generateSubKeys(chave) {
    const key56 = permute(chave, PC1);
    let C = key56.slice(0, 28);
    let D = key56.slice(28);
    const subKeys = [];

    for (let i = 0; i < 16; i++) {
        const shifts = [1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2][i];
        C = leftShift(C, shifts);
        D = leftShift(D, shifts);
        const subKey = permute(C.concat(D), PC2);
        subKeys.push(subKey);
    }

    return subKeys;
}

function xorBinary(a, b) {
    return a.split('').map((bit, index) => bit ^ b[index]).join('');
}

function f(RnMinus1, Kn) {
    const expandedRnMinus1 = E.map(position => RnMinus1[position - 1]).join('');
    const xorResult = xorBinary(expandedRnMinus1, Kn);
    const groups = [];

    for (let i = 0; i < 8; i++) {
        groups.push(xorResult.slice(i * 6, (i + 1) * 6));
    }

    let sBoxResult = '';
    groups.forEach((group, index) => {
        const row = parseInt(group[0] + group[5], 2);
        const col = parseInt(group.slice(1, 5), 2);
        const sBoxValue = SBoxes[index][row][col];
        sBoxResult += sBoxValue.toString(2).padStart(4, '0');
    });

    return P.map(position => sBoxResult[position - 1]).join('');
}

// function desEncrypt(input, chave) {
//     const binMessage = hexToBin(input);
//     const permutedMessage = permute(binMessage, IP);
//     const subKeys = generateSubKeys(chave);

//     let L = permutedMessage.slice(0, 32);
//     let R = permutedMessage.slice(32);

//     for (let round = 0; round < 16; round++) {
//         const Kn = subKeys[round];
//         const newL = R;
//         const newR = xorBinary(L, f(R, Kn));
//         L = newL;
//         R = newR;
//     }

//     const finalLR = R + L;
//     return binToHex(permute(finalLR, IP_1));
// }

// function desDecrypt(input, chave) {
//     const binMessage = hexToBin(input);
//     const permutedMessage = permute(binMessage, IP);
//     const subKeys = generateSubKeys(chave).reverse();

//     let L = permutedMessage.slice(0, 32);
//     let R = permutedMessage.slice(32);

//     for (let round = 0; round < 16; round++) {
//         const Kn = subKeys[round];
//         const newL = R;
//         const newR = xorBinary(L, f(R, Kn));
//         L = newL;
//         R = newR;
//     }

//     const finalLR = R + L;
//     return binToHex(permute(finalLR, IP_1));
// }




